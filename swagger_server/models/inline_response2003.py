# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse2003(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, quote_id: str=None, amount_fiat: int=None, currency_id: int=None, payment_option_id: int=None, amount_sats: int=None, is_estimate: bool=True, btc_price: int=None, order_fee: int=None, expires_on: datetime=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger

        :param quote_id: The quote_id of this InlineResponse2003.  # noqa: E501
        :type quote_id: str
        :param amount_fiat: The amount_fiat of this InlineResponse2003.  # noqa: E501
        :type amount_fiat: int
        :param currency_id: The currency_id of this InlineResponse2003.  # noqa: E501
        :type currency_id: int
        :param payment_option_id: The payment_option_id of this InlineResponse2003.  # noqa: E501
        :type payment_option_id: int
        :param amount_sats: The amount_sats of this InlineResponse2003.  # noqa: E501
        :type amount_sats: int
        :param is_estimate: The is_estimate of this InlineResponse2003.  # noqa: E501
        :type is_estimate: bool
        :param btc_price: The btc_price of this InlineResponse2003.  # noqa: E501
        :type btc_price: int
        :param order_fee: The order_fee of this InlineResponse2003.  # noqa: E501
        :type order_fee: int
        :param expires_on: The expires_on of this InlineResponse2003.  # noqa: E501
        :type expires_on: datetime
        """
        self.swagger_types = {
            'quote_id': str,
            'amount_fiat': int,
            'currency_id': int,
            'payment_option_id': int,
            'amount_sats': int,
            'is_estimate': bool,
            'btc_price': int,
            'order_fee': int,
            'expires_on': datetime
        }

        self.attribute_map = {
            'quote_id': 'quote_id',
            'amount_fiat': 'amount_fiat',
            'currency_id': 'currency_id',
            'payment_option_id': 'payment_option_id',
            'amount_sats': 'amount_sats',
            'is_estimate': 'is_estimate',
            'btc_price': 'btc_price',
            'order_fee': 'order_fee',
            'expires_on': 'expires_on'
        }
        self._quote_id = quote_id
        self._amount_fiat = amount_fiat
        self._currency_id = currency_id
        self._payment_option_id = payment_option_id
        self._amount_sats = amount_sats
        self._is_estimate = is_estimate
        self._btc_price = btc_price
        self._order_fee = order_fee
        self._expires_on = expires_on

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2003':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_3 of this InlineResponse2003.  # noqa: E501
        :rtype: InlineResponse2003
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quote_id(self) -> str:
        """Gets the quote_id of this InlineResponse2003.


        :return: The quote_id of this InlineResponse2003.
        :rtype: str
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id: str):
        """Sets the quote_id of this InlineResponse2003.


        :param quote_id: The quote_id of this InlineResponse2003.
        :type quote_id: str
        """

        self._quote_id = quote_id

    @property
    def amount_fiat(self) -> int:
        """Gets the amount_fiat of this InlineResponse2003.


        :return: The amount_fiat of this InlineResponse2003.
        :rtype: int
        """
        return self._amount_fiat

    @amount_fiat.setter
    def amount_fiat(self, amount_fiat: int):
        """Sets the amount_fiat of this InlineResponse2003.


        :param amount_fiat: The amount_fiat of this InlineResponse2003.
        :type amount_fiat: int
        """
        if amount_fiat is None:
            raise ValueError("Invalid value for `amount_fiat`, must not be `None`")  # noqa: E501

        self._amount_fiat = amount_fiat

    @property
    def currency_id(self) -> int:
        """Gets the currency_id of this InlineResponse2003.


        :return: The currency_id of this InlineResponse2003.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id: int):
        """Sets the currency_id of this InlineResponse2003.


        :param currency_id: The currency_id of this InlineResponse2003.
        :type currency_id: int
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def payment_option_id(self) -> int:
        """Gets the payment_option_id of this InlineResponse2003.


        :return: The payment_option_id of this InlineResponse2003.
        :rtype: int
        """
        return self._payment_option_id

    @payment_option_id.setter
    def payment_option_id(self, payment_option_id: int):
        """Sets the payment_option_id of this InlineResponse2003.


        :param payment_option_id: The payment_option_id of this InlineResponse2003.
        :type payment_option_id: int
        """
        if payment_option_id is None:
            raise ValueError("Invalid value for `payment_option_id`, must not be `None`")  # noqa: E501

        self._payment_option_id = payment_option_id

    @property
    def amount_sats(self) -> int:
        """Gets the amount_sats of this InlineResponse2003.


        :return: The amount_sats of this InlineResponse2003.
        :rtype: int
        """
        return self._amount_sats

    @amount_sats.setter
    def amount_sats(self, amount_sats: int):
        """Sets the amount_sats of this InlineResponse2003.


        :param amount_sats: The amount_sats of this InlineResponse2003.
        :type amount_sats: int
        """
        if amount_sats is None:
            raise ValueError("Invalid value for `amount_sats`, must not be `None`")  # noqa: E501

        self._amount_sats = amount_sats

    @property
    def is_estimate(self) -> bool:
        """Gets the is_estimate of this InlineResponse2003.

        return true if estimate or false if quote  # noqa: E501

        :return: The is_estimate of this InlineResponse2003.
        :rtype: bool
        """
        return self._is_estimate

    @is_estimate.setter
    def is_estimate(self, is_estimate: bool):
        """Sets the is_estimate of this InlineResponse2003.

        return true if estimate or false if quote  # noqa: E501

        :param is_estimate: The is_estimate of this InlineResponse2003.
        :type is_estimate: bool
        """
        if is_estimate is None:
            raise ValueError("Invalid value for `is_estimate`, must not be `None`")  # noqa: E501

        self._is_estimate = is_estimate

    @property
    def btc_price(self) -> int:
        """Gets the btc_price of this InlineResponse2003.


        :return: The btc_price of this InlineResponse2003.
        :rtype: int
        """
        return self._btc_price

    @btc_price.setter
    def btc_price(self, btc_price: int):
        """Sets the btc_price of this InlineResponse2003.


        :param btc_price: The btc_price of this InlineResponse2003.
        :type btc_price: int
        """
        if btc_price is None:
            raise ValueError("Invalid value for `btc_price`, must not be `None`")  # noqa: E501

        self._btc_price = btc_price

    @property
    def order_fee(self) -> int:
        """Gets the order_fee of this InlineResponse2003.


        :return: The order_fee of this InlineResponse2003.
        :rtype: int
        """
        return self._order_fee

    @order_fee.setter
    def order_fee(self, order_fee: int):
        """Sets the order_fee of this InlineResponse2003.


        :param order_fee: The order_fee of this InlineResponse2003.
        :type order_fee: int
        """
        if order_fee is None:
            raise ValueError("Invalid value for `order_fee`, must not be `None`")  # noqa: E501

        self._order_fee = order_fee

    @property
    def expires_on(self) -> datetime:
        """Gets the expires_on of this InlineResponse2003.


        :return: The expires_on of this InlineResponse2003.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: datetime):
        """Sets the expires_on of this InlineResponse2003.


        :param expires_on: The expires_on of this InlineResponse2003.
        :type expires_on: datetime
        """

        self._expires_on = expires_on
