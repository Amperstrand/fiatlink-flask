# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PaymentoptionsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, session_id: str=None, currency_code: str=None):  # noqa: E501
        """PaymentoptionsBody - a model defined in Swagger

        :param session_id: The session_id of this PaymentoptionsBody.  # noqa: E501
        :type session_id: str
        :param currency_code: The currency_code of this PaymentoptionsBody.  # noqa: E501
        :type currency_code: str
        """
        self.swagger_types = {
            'session_id': str,
            'currency_code': str
        }

        self.attribute_map = {
            'session_id': 'session_id',
            'currency_code': 'currency_code'
        }
        self._session_id = session_id
        self._currency_code = currency_code

    @classmethod
    def from_dict(cls, dikt) -> 'PaymentoptionsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The paymentoptions_body of this PaymentoptionsBody.  # noqa: E501
        :rtype: PaymentoptionsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_id(self) -> str:
        """Gets the session_id of this PaymentoptionsBody.


        :return: The session_id of this PaymentoptionsBody.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this PaymentoptionsBody.


        :param session_id: The session_id of this PaymentoptionsBody.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def currency_code(self) -> str:
        """Gets the currency_code of this PaymentoptionsBody.


        :return: The currency_code of this PaymentoptionsBody.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: str):
        """Sets the currency_code of this PaymentoptionsBody.


        :param currency_code: The currency_code of this PaymentoptionsBody.
        :type currency_code: str
        """

        self._currency_code = currency_code
